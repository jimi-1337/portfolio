{"version":3,"sources":["../../src/bootstrap/get-config-file.ts"],"names":["isNearMatch","fileName","configName","distance","getConfigFile","siteDirectory","configPath","configFilePath","configModule","path","join","COMPILED_CACHE_DIR","require","resolve","err","code","report","panic","id","error","context","message","nearMatch","fs","readdir","then","files","find","file","split","pop"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,SAASA,WAAT,CACEC,QADF,EAEEC,UAFF,EAGEC,QAHF,EAIW;AACT,MAAI,CAACF,QAAL,EAAe,OAAO,KAAP;AACf,SAAO,kCAAYA,QAAZ,EAAsBC,UAAtB,KAAqCC,QAA5C;AACD;;AAEM,eAAeC,aAAf,CACLC,aADK,EAELH,UAFK,EAGLC,QAAgB,GAAG,CAHd,EAOJ;AACD,MAAIG,UAAU,GAAI,EAAlB;AACA,MAAIC,cAAc,GAAI,EAAtB;AACA,MAAIC,YAAJ;;AAEA,MAAI;AACF;AACAF,IAAAA,UAAU,GAAGG,cAAKC,IAAL,CAAW,GAAEL,aAAc,IAAGM,sCAAmB,EAAjD,EAAoDT,UAApD,CAAb;AACAK,IAAAA,cAAc,GAAGK,OAAO,CAACC,OAAR,CAAgBP,UAAhB,CAAjB;AACAE,IAAAA,YAAY,GAAGI,OAAO,CAACL,cAAD,CAAtB;AACD,GALD,CAKE,OAAOO,GAAP,EAAY;AACZ,QAAI,EAAEA,GAAG,CAACC,IAAJ,KAAc,kBAAhB,CAAJ,EAAwC;AACtC;AACA;AACAC,wBAAOC,KAAP,CAAa;AACXC,QAAAA,EAAE,EAAG,OADM;AAEXC,QAAAA,KAAK,EAAEL,GAFI;AAGXM,QAAAA,OAAO,EAAE;AACPlB,UAAAA,UADO;AAEPmB,UAAAA,OAAO,EAAEP,GAAG,CAACO;AAFN;AAHE,OAAb;AAQD,KAZW,CAcZ;;;AACAf,IAAAA,UAAU,GAAGG,cAAKC,IAAL,CAAUL,aAAV,EAAyBH,UAAzB,CAAb;;AACA,QAAI;AACFK,MAAAA,cAAc,GAAGK,OAAO,CAACC,OAAR,CAAgBP,UAAhB,CAAjB;AACAE,MAAAA,YAAY,GAAGI,OAAO,CAACL,cAAD,CAAtB;AACD,KAHD,CAGE,OAAOO,GAAP,EAAY;AACZ;AACA,YAAMQ,SAAS,GAAG,MAAMC,iBAAGC,OAAH,CAAWnB,aAAX,EAA0BoB,IAA1B,CAA+BC,KAAK,IAC1DA,KAAK,CAACC,IAAN,CAAWC,IAAI,IAAI;AACjB,cAAM3B,QAAQ,GAAG2B,IAAI,CAACC,KAAL,CAAWxB,aAAX,EAA0ByB,GAA1B,EAAjB;AACA,eAAO9B,WAAW,CAACC,QAAD,EAAWC,UAAX,EAAuBC,QAAvB,CAAlB;AACD,OAHD,CADsB,CAAxB;;AAMA,UAAI,CAAC,wCAAiBG,UAAjB,EAA6BQ,GAA7B,CAAL,EAAwC;AACtCE,0BAAOC,KAAP,CAAa;AACXC,UAAAA,EAAE,EAAG,OADM;AAEXC,UAAAA,KAAK,EAAEL,GAFI;AAGXM,UAAAA,OAAO,EAAE;AACPlB,YAAAA,UADO;AAEPmB,YAAAA,OAAO,EAAEP,GAAG,CAACO;AAFN;AAHE,SAAb;AAQD,OATD,MASO,IAAIC,SAAJ,EAAe;AACpBN,0BAAOC,KAAP,CAAa;AACXC,UAAAA,EAAE,EAAG,OADM;AAEXC,UAAAA,KAAK,EAAEL,GAFI;AAGXM,UAAAA,OAAO,EAAE;AACPlB,YAAAA,UADO;AAEPoB,YAAAA;AAFO;AAHE,SAAb;AAQD,OATM,MASA,IACL,0BAAWb,cAAKC,IAAL,CAAUL,aAAV,EAA0B,KAA1B,EAAgCH,UAAU,GAAI,KAA9C,CAAX,CADK,EAEL;AACAc,0BAAOC,KAAP,CAAa;AACXC,UAAAA,EAAE,EAAG,OADM;AAEXE,UAAAA,OAAO,EAAE;AACPlB,YAAAA;AADO;AAFE,SAAb;AAMD;AACF;AACF;;AAED,SAAO;AAAEM,IAAAA,YAAF;AAAgBD,IAAAA;AAAhB,GAAP;AACD","sourcesContent":["import { distance as levenshtein } from \"fastest-levenshtein\"\nimport fs from \"fs-extra\"\nimport { testRequireError } from \"../utils/test-require-error\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport path from \"path\"\nimport { sync as existsSync } from \"fs-exists-cached\"\nimport { COMPILED_CACHE_DIR } from \"../utils/parcel/compile-gatsby-files\"\n\nfunction isNearMatch(\n  fileName: string | undefined,\n  configName: string,\n  distance: number\n): boolean {\n  if (!fileName) return false\n  return levenshtein(fileName, configName) <= distance\n}\n\nexport async function getConfigFile(\n  siteDirectory: string,\n  configName: string,\n  distance: number = 3\n): Promise<{\n  configModule: any\n  configFilePath: string\n}> {\n  let configPath = ``\n  let configFilePath = ``\n  let configModule: any\n\n  try {\n    // Try .cache/compiled/gatsby-config first\n    configPath = path.join(`${siteDirectory}/${COMPILED_CACHE_DIR}`, configName)\n    configFilePath = require.resolve(configPath)\n    configModule = require(configFilePath)\n  } catch (err) {\n    if (!(err.code === `MODULE_NOT_FOUND`)) {\n      // If it's not the MODULE_NOT_FOUND error (which can happen if we're looking for JS files)\n      // It means it's an error with the compiled file\n      report.panic({\n        id: `11902`,\n        error: err,\n        context: {\n          configName,\n          message: err.message,\n        },\n      })\n    }\n\n    // Fallback to regular rootDir gatsby-config\n    configPath = path.join(siteDirectory, configName)\n    try {\n      configFilePath = require.resolve(configPath)\n      configModule = require(configFilePath)\n    } catch (err) {\n      // Only then hard fail\n      const nearMatch = await fs.readdir(siteDirectory).then(files =>\n        files.find(file => {\n          const fileName = file.split(siteDirectory).pop()\n          return isNearMatch(fileName, configName, distance)\n        })\n      )\n      if (!testRequireError(configPath, err)) {\n        report.panic({\n          id: `10123`,\n          error: err,\n          context: {\n            configName,\n            message: err.message,\n          },\n        })\n      } else if (nearMatch) {\n        report.panic({\n          id: `10124`,\n          error: err,\n          context: {\n            configName,\n            nearMatch,\n          },\n        })\n      } else if (\n        existsSync(path.join(siteDirectory, `src`, configName + `.js`))\n      ) {\n        report.panic({\n          id: `10125`,\n          context: {\n            configName,\n          },\n        })\n      }\n    }\n  }\n\n  return { configModule, configFilePath }\n}\n"],"file":"get-config-file.js"}