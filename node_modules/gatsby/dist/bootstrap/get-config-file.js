"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.getConfigFile = getConfigFile;

var _fastestLevenshtein = require("fastest-levenshtein");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _testRequireError = require("../utils/test-require-error");

var _reporter = _interopRequireDefault(require("gatsby-cli/lib/reporter"));

var _path = _interopRequireDefault(require("path"));

var _fsExistsCached = require("fs-exists-cached");

var _compileGatsbyFiles = require("../utils/parcel/compile-gatsby-files");

function isNearMatch(fileName, configName, distance) {
  if (!fileName) return false;
  return (0, _fastestLevenshtein.distance)(fileName, configName) <= distance;
}

async function getConfigFile(siteDirectory, configName, distance = 3) {
  let configPath = ``;
  let configFilePath = ``;
  let configModule;

  try {
    // Try .cache/compiled/gatsby-config first
    configPath = _path.default.join(`${siteDirectory}/${_compileGatsbyFiles.COMPILED_CACHE_DIR}`, configName);
    configFilePath = require.resolve(configPath);
    configModule = require(configFilePath);
  } catch (err) {
    if (!(err.code === `MODULE_NOT_FOUND`)) {
      // If it's not the MODULE_NOT_FOUND error (which can happen if we're looking for JS files)
      // It means it's an error with the compiled file
      _reporter.default.panic({
        id: `11902`,
        error: err,
        context: {
          configName,
          message: err.message
        }
      });
    } // Fallback to regular rootDir gatsby-config


    configPath = _path.default.join(siteDirectory, configName);

    try {
      configFilePath = require.resolve(configPath);
      configModule = require(configFilePath);
    } catch (err) {
      // Only then hard fail
      const nearMatch = await _fsExtra.default.readdir(siteDirectory).then(files => files.find(file => {
        const fileName = file.split(siteDirectory).pop();
        return isNearMatch(fileName, configName, distance);
      }));

      if (!(0, _testRequireError.testRequireError)(configPath, err)) {
        _reporter.default.panic({
          id: `10123`,
          error: err,
          context: {
            configName,
            message: err.message
          }
        });
      } else if (nearMatch) {
        _reporter.default.panic({
          id: `10124`,
          error: err,
          context: {
            configName,
            nearMatch
          }
        });
      } else if ((0, _fsExistsCached.sync)(_path.default.join(siteDirectory, `src`, configName + `.js`))) {
        _reporter.default.panic({
          id: `10125`,
          context: {
            configName
          }
        });
      }
    }
  }

  return {
    configModule,
    configFilePath
  };
}
//# sourceMappingURL=get-config-file.js.map